require "debugger"

class Sudoku
  def initialize(board_string)
    @board = board_string
    @cell_hash = {
      0=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      1=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      2=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      3=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      4=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      5=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      6=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      7=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      8=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      9=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      10=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      11=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      12=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      13=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      14=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      15=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      16=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      17=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      18=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      19=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      20=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      21=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      22=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      23=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      24=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      25=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      26=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      27=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      28=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      29=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      30=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      31=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      32=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      33=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      34=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      35=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      36=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      37=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      38=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      39=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      40=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      41=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      42=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      43=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      44=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      45=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      46=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      47=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      48=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      49=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      50=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      51=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      52=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      53=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      54=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      55=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      56=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      57=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      58=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      59=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      60=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      61=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      62=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      63=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      64=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      65=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      66=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      67=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      68=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      69=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      70=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      71=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      72=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      73=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      74=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      75=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      76=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      77=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      78=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      79=>[1, 2, 3, 4, 5, 6, 7, 8, 9],
      80=>[1, 2, 3, 4, 5, 6, 7, 8, 9]}

    @row_hash = {
      0 => [0,1,2,3,4,5,6,7,8],
      1 => [9,10,11,12,13,14,15,16,17],
      2 => [18,19,20,21,22,23,24,25,26],
      3 => [27,28,29,30,31,32,33,34,35],
      4 => [36,37,38,39,40,41,42,43,44],
      5 => [45,46,47,48,49,50,51,52,53],
      6 => [54,55,56,57,58,59,60,61,62],
      7 => [63,64,65,66,67,68,69,70,71],
      8 => [72,73,74,75,76,77,78,79,80]
    }

    @box_hash = {
      0 => [0,1,2, 9,10,11,18,19,20],
      1 => [3,4,5,12,13,14,21,22,23],
      2 => [6,7,8,15,16,17,24,25,26],
      3 => [27,28,29,36,37,38,45,46,47],
      4 => [30,31,32,39,40,41,48,49,50],
      5 => [33,34,35,42,43,44,51,52,53],
      6 => [54,55,56,63,64,65,72,73,74],
      7 => [57,58,59,66,67,68,75,76,77],
      8 => [60,61,62,69,70,71,78,79,80]}

    @col_hash = {
      0 => [0,9,18,27,36,45,54,63,72],
      1 => [1,10,19,28,37,46,55,64,73],
      2 => [2,11,20,29,38,47,56,65,74],
      3 => [3,12,21,30,39,48,57,66,75],
      4 => [4,13,22,31,40,49,58,67,76],
      5 => [5,14,23,32,41,50,59,68,77],
      6 => [6,15,24,33,42,51,60,69,78],
      7 => [7,16,25,34,43,52,61,70,79],
      8 => [8,17,26,35,44,53,62,71,80]
    }
  end

  def solve
    # debugger
    @times_ran = 0
    box_eval
  end

  def box_eval
    puts "Evaluating boxes now"
    @box_hash.each do |box, coord|
      eval(coord)
    end
    # debugger
    box_eval if fill_empties?
    row_eval
  end

def row_eval
    @row_hash.each do |row, coord|
      eval(coord)
    end
    box_eval if fill_empties?
    col_eval
  end

  def col_eval
      @col_hash.each do |col, coord|
        eval(coord)
      end
    box_eval if fill_empties?
  end

  def eval(coord)
    puts "Eval running now"
    default = []
    coord.each do |cell|
      default << @board[cell].to_i if @board[cell] != "-"
      end
    # p default
    if !(default.uniq == default)
      debugger
    end
    cell_update(default, coord)
  end

  def cell_update(default, coord)
    puts "Updating cells now"
    p default
    coord.each do |cell|
      p cell
      @cell_hash[cell] -= default #remove possibles
      # @cell_hash[cell].delete_if { |possibles| default.include? possibles }
      p @cell_hash[cell]
    end
  end

  def fill_empties?
    p "Filling empties now"
    # debugger
    board_update = false
    # @cell_hash.each |cell, possibles|
     81.times do |cell|
      if @cell_hash[cell].count == 1 && @board[cell] == "-"
        @board[cell] = @cell_hash[cell].first.to_s
        board_update = true
      end
    end
    @times_ran += 1
    board_update
  end

  def board
    @board.to_s
  end

  # Returns a string representing the current state of the board
  def to_s
    board_string = []
    row = 0
    for i in 0..8 do
      board_string << @board[row..row + 8] + "\n"
      row += 9
    end
    board_string.join
  end
end

# class Cell
#   attr_reader :box_id, :column_id, :row_id

#   BOX_ID = {
#       0 => [0,1,2, 9,10,11,18,19,20],
#       1 => [3,4,5,12,13,14,21,22,23],
#       2 => [6,7,8,15,16,17,24,25,26],
#       3 => [27,28,29,36,37,38,45,46,47],
#       4 => [30,31,32,39,40,41,48,49,50],
#       5 => [33,34,35,42,43,44,51,52,53],
#       6 => [54,55,56,63,64,65,72,73,74],
#       7 => [57,58,59,66,67,68,75,76,77],
#       8 => [60,61,62,69,70,71,78,79,80]}

#   def initialize(index, value)
#   @value = value
#   @index = index
#   @box_id = set_box_id
#   @column_id = index % 9
#   @row_id = (index / 9)
#   end

#   def value=(value)
#     return if @value.is_a?(Fixnum)
#     @value = value
#   end

#   def set_box_id
#     inverted_boxes = BOX_ID.invert
#     box_key = inverted_boxes.keys.select {|key| key.include?(@index)}
#     inverted_boxes[box_key]
#   end
# end

# 1-5 | 8-2 | ---
# -9- | -76 | 4-5
# 2-- | 4-- | 819
# ---------------
# -19 | --7 | 3-6
# 762 | -83 | -9-
# --- | -61 | -5-
# ---------------
# --7 | 6-- | -3-
# 43- | -2- | 5-1
# 6-- | 3-8 | 9--

# test = "1-58-2----9--764-52--4--819-19--73-6762-83-9-----61-5---76---3-43--2-5-16--3-89--"
# # test = "1-5-9-2--"

# game = Sudoku.new(test)
# game.solve
# puts game

